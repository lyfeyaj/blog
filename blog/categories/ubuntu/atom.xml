<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ubuntu | LYFEYAJ]]></title>
  <link href="http://lyfeyaj.github.com/blog/blog/categories/ubuntu/atom.xml" rel="self"/>
  <link href="http://lyfeyaj.github.com/blog/"/>
  <updated>2012-03-31T09:32:31+08:00</updated>
  <id>http://lyfeyaj.github.com/blog/</id>
  <author>
    <name><![CDATA[lyfeyaj]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Sublime Text 2 使用方法和问题小结]]></title>
    <link href="http://lyfeyaj.github.com/blog/blog/2012/03/29/sublime-text-2shi-yong-fang-fa-he-wen-ti-xiao-jie/"/>
    <updated>2012-03-29T00:13:00+08:00</updated>
    <id>http://lyfeyaj.github.com/blog/blog/2012/03/29/sublime-text-2shi-yong-fang-fa-he-wen-ti-xiao-jie</id>
    <content type="html"><![CDATA[<p>去年刚接触Ruby on Rails的时候编辑器是用的eclipse，并安装了RDT插件，但是总觉得用的不爽。无意中发现了 <a href="http://www.sublimetext.com">Sublime Text</a> 编辑器，一段时间用下来，最大的感觉就是各种流畅！<!-- more -->关于Sublime Text 的详细介绍和使用技巧可以参见lucifr的博客：<a href="http://lucifr.com/139225/sublime-text-2-tricks-and-tips/">Sublime Text 2 入门及技巧</a></p>

<p>这里主要介绍linux下的使用。</p>

<h3>1.终端调用：</h3>

<p>若想在终端调用，可使用如下命令将sublime链接到/usr/bin中，便可直接调用:</p>

<pre><code>sudo ln -s your_sublime_path/sublime_text /usr/bin/subl
</code></pre>

<p>若存在权限问题，则键入如下命令：</p>

<pre><code>chmod +x /usr/bin/subl
</code></pre>

<p>终端键入 subl 即可调用啦，enjoy！</p>

<p>运行 <code>subl --help</code> 可以查看 subl 命令的使用方法：</p>

<pre><code>使用:  subl [参数] [文件]         编辑指定文件
   或: subl [参数] [目录]            打开指定目录
   或: subl [参数] -             编辑 stdin

可用参数:
  --project &lt;项目&gt;: 读取指定项目
  --command &lt;命令&gt;: 运行指定命令
  -n 或 --new-window:  打开新窗口
  -a 或 --add:         向当前窗口中添加文件夹
  -w 或 --wait:        等待文件关闭后再返回
  -b 或 --background:  不激活程序窗口
  -s 或 --stay:        关闭文件后保持程序窗口激活
  -h 或 --help:        显示此帮助
  -v 或 --version:     显示版本号

读取 stdin 时会使用 --wait 参数。通过 --stay 可以在文件关闭后不返回终端（仅针对单个文件）。

可以通过向文件名添加 `:行号` 或 `:行号:列号` 后缀来打开到更具体的位置。
</code></pre>

<p>如果发现出现Gtk-WARNING **: 无法在模块路径中找到主题引擎：“pixmap”？
在终端下输入:</p>

<pre><code>sudo apt-get install gtk2-engines-pixbuf
</code></pre>

<p>即可解决.</p>

<h3>2.实用快捷键：</h3>

<h4>打开/前往</h4>

<pre><code>Ctrl+R                     前往method
Ctrl+Shift+P               命令提示
Ctrl+P                     前往文件
Ctrl+`                     开关python控制台
Ctrl+Shift+N               新建窗口
Ctrl+N                     新建文件
</code></pre>

<h4>编辑</h4>

<pre><code>Ctrl+L                     选择整行（按住-继续选择下行）
Ctrl+D                     选词 （按住-继续选择下个相同的字符串）
Ctrl+KK                    从光标处删除至行尾
Ctrl+Shift+K               删除整行
Ctrl+Shift+D               复制光标所在整行，插入在该行之后
Ctrl+J                     合并行（已选择需要合并的多行时）
Ctrl+KU                    改为大写
Ctrl+KL                    改为小写
Ctrl+M                     光标移动至括号内开始或结束的位置                        
Ctrl+Shift+M               选择括号内的内容（按住-继续选择父括号）                 
Ctrl+?                     注释整行
Ctrl+Shift+?               注释已选择内容
Ctrl+Space                 自动完成
Ctrl+Z                     撤销
Ctrl+Y                     恢复撤销
Ctrl+Shift+V               粘贴并自动缩进
Ctrl+M                     光标跳至对应的括号
Ctrl+W                     闭合当前标签
Ctrl+Shift+A               选择光标位置父标签对儿                                  
Ctrl+Shift+[               折叠代码
Ctrl+Shift+]               展开代码
Ctrl+KT                    折叠属性 
Ctrl+U                     软撤销
Ctrl+T                     词互换
Tab                        缩进
Shift+Tab                  去除缩进
Ctrl+Shift+UP              与上行互换
Ctrl+Shift+DOWN            与下行互换
Ctrl+K Backspace           从光标处删除至行首
Ctrl+Enter                 插入行后
Ctrl+Shift Enter           插入行前
Ctrl+[                     缩进
Ctrl+]                     去除缩进
F9                         行排序（按a-z）
</code></pre>

<h4>查找/替换</h4>

<pre><code>Ctrl+F                     当前页面查找
Ctrl+Shift+F               全文搜索（替换）
Ctrl+H                     替换
Ctrl+Shift+H               替换下一个
</code></pre>

<h3>3.实用插件</h3>

<pre><code>IndentGuides               自动缩进
Sublime Alignment          行整理，美化
Git                        在Sublime Text中使用git命令
Case Conversion            大小写转换
JS Format                  js格式转换
Zen Coding                 强大的html生成插件
Beautify Ruby              ruby格式转换
SCSS                       scss代码高亮
ERB                        快捷键入erb模板中的ruby代码引用符号
Markdown Preview           在浏览器中预览markdown文件
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu上搭建 Ruby on Rails 生产环境]]></title>
    <link href="http://lyfeyaj.github.com/blog/blog/2012/03/27/ubuntushang-da-jian-ruby-on-rails-sheng-chan-huan-jing/"/>
    <updated>2012-03-27T00:26:00+08:00</updated>
    <id>http://lyfeyaj.github.com/blog/blog/2012/03/27/ubuntushang-da-jian-ruby-on-rails-sheng-chan-huan-jing</id>
    <content type="html"><![CDATA[<h3>注意事项:</h3>

<ul>
<li>机子必须可以链接到外网, 下面的安装操作需要走网络下载对应的安装包, 在国内可能会存在某些网络无法访问的情况, 需自行准备梯子.</li>
<li>文章中的软件基于软件版本基于: <code>ubuntu-11.10</code>, <code>rvm-1.11.2</code>, <code>ruby-1.9.3-p125</code>, <code>postgresql-9.1.3</code>,版本可能会过期, 如果过期的话记得把命令替换成对应版本.</li>
<li>这里的本地配置和服务器的配置主要区别在于rvm的安装，以及本地无需安装apache和passenger,其余一样.</li>
<li>默认情况下，本地配置需要加入sudo获取root权限，服务器所有的命令都使用 root 用户运行, 如果不是 root 用户可以通过 <code>sudo su -</code> 切换到 root 用户进行安装。</li>
</ul>


<!-- more -->


<h2>一. 基本环境安装</h2>

<h3>1.更新服务器到最新的系统</h3>

<pre><code>apt-get update
apt-get dist-upgrade
do-release-upgrade
</code></pre>

<p>较新的系统可以减少许多不必要的兼容性问题</p>

<h3>2.设置 <code>/etc/bash.bashrc</code> 和 <code>/etc/profile</code></h3>

<p>设置 bashrc 和 profile 主要是为了解决 no-login 和 non-interactive 模式下 shell 的 PATH 问题. 顺带的开启下自动补全之类的。</p>

<p>编辑 <code>/etc/profile</code> 文件, 在文件头加入：</p>

<pre><code>export system_profile_loaded=1
</code></pre>

<p>并且找到：</p>

<pre><code>if [ "$PS1" ]; then
  if [ "$BASH" ]; then
      # The file bash.bashrc already sets the default PS1.
      # PS1='\h:\w\$ '
      if [ -f /etc/bash.bashrc ]; then
            . /etc/bash.bashrc
      fi
  else
    if [ "`id -u`" -eq 0 ]; then
      PS1='# '
    else
      PS1='$ '
    fi
  fi
fi
</code></pre>

<p>修改成：</p>

<pre><code>if [ "$BASH" ]; then
  [ -f /etc/bash.bashrc ] &amp;&amp; . /etc/bash.bashrc
fi
</code></pre>

<p>编辑 <code>/etc/bash.bashrc</code> 在并开头加入：</p>

<pre><code>[ -n "${system_bashrc_running}" ] &amp;&amp; return
system_bashrc_running=1
[ -z "${system_profile_loaded}" ] &amp;&amp; source /etc/profile
unset system_bashrc_running
system_bashrc_runned=1
</code></pre>

<p>接着安装 bash 自动补全 <code>apt-get install bash-completion</code> , 然后编辑 <code>/etc/bash.bashrc</code> 找到：</p>

<pre><code>#if [ -f /etc/bash_completion ] &amp;&amp; ! shopt -oq posix; then
#    . /etc/bash_completion
#fi
</code></pre>

<p>并删除前面的 “#” 也就是修改成:</p>

<pre><code>if [ -f /etc/bash_completion ] &amp;&amp; ! shopt -oq posix; then
. /etc/bash_completion
fi
</code></pre>

<p>最后删除 <code>/etc/profile.d/bash_completion.sh</code> 因为已经在 <code>/etc/bash.bashrc</code> 开启了 bash completion, 无需通过 profile 来开启。</p>

<h2>二. 安装 Ruby 环境</h2>

<p><a href="http://rvm.beginrescueend.com/">RVM</a> 是目前最好的, 也是最常用的管理和编译 ruby 的工具, 使用 rvm, 可以减少以 后 ruby 升级带来的麻烦, 更平滑的迁移到新版本。</p>

<h3>1.本地rvm安装（无需sudo）：</h3>

<pre><code>bash -s stable &lt; &lt;(curl -s https://raw.github.com/wayneeseguin/rvm/master/binscripts/rvm-installer )
</code></pre>

<p>安装完成后的地址为：<code>~/.rvm/</code></p>

<p>安装完成后我们需要通过命令加载rvm函数：</p>

<pre><code>echo '[[ -s "$HOME/.rvm/scripts/rvm" ]] &amp;&amp; . "$HOME/.rvm/scripts/rvm" # Load RVM function' &gt;&gt; ~/.bash_profile
</code></pre>

<p>保存在 <code>~/.bash_profile</code> 文件中。</p>

<p>要引用rvm函数，需要重载配置文件 <code>.bash_profile</code>：</p>

<pre><code>source ~/.bash_profile
</code></pre>

<p>最后记得重新登入或者重启一下服务器, 使得 rvm 生效. 测试的话可以输入：</p>

<pre><code>type rvm | head -1
rvm is a function
</code></pre>

<p>如果看到 rvm is a function 就算成功的安装好了。</p>

<p>如果不想每次使用source来载入rvm，我们需要在<code>~/.bashrc</code>中加入如下代码：</p>

<pre><code>[ -z "${bash_profile_loaded}" ] &amp;&amp; source $HOME/.bash_profile
</code></pre>

<p>这样我们就能在每次重新登录，或者打开一个新的终端时自动载入rvm。</p>

<p>本地配置用户可直接跳过下面的服务器rvm安装。</p>

<h3>2. 服务器rvm安装(注意的是 这里使用的是 root 用户)：</h3>

<pre><code>apt-get install -y curl git-core
curl -s https://raw.github.com/wayneeseguin/rvm/master/binscripts/rvm-installer -o rvm-installer
chmod +x rvm-installer
./rvm-installer --version latest
usermod -a -G rvm root
rm rvm-installer
</code></pre>

<p>最后记得重新登入或者重启一下服务器, 使得 rvm 生效. 测试的话可以输入：</p>

<pre><code>type rvm | head -1
rvm is a function
</code></pre>

<p>如果看到 rvm is a function 就算成功的安装好了. 另外由于 rvm 是 root 用户安装的, 所以其他用户如果没有 sudo 权限将无法安装 gem, 需要将其加入 rvm 组才可以, 后面会详细说明.</p>

<h3>2. 使用 RVM 安装和编译 Ruby</h3>

<p>安装好 rvm 以后 我们可以使用 rvm 来对 ruby 进行编译, 以前曾经推荐使用 ree 版本的 ruby, 但随着 ruby 1.9.2 的发布, ree ruby 已经在性能上没有任何优势了, 所以目前只推荐安装官方的 1.9.2+ 版本的 Ruby, 但在编译 Ruby 前首先是需要安装 该 Ruby 所需要的类库, 所以我们输入:</p>

<pre><code>rvm requirements
</code></pre>

<p>程序会列出不同的 Ruby 所需要的系统类库, 从中找出<code>MRI</code>也就是：</p>

<pre><code>Additional Dependencies:
# For Ruby / Ruby HEAD (MRI, Rubinius, &amp; REE), install the following:  
ruby: /usr/bin/apt-get install build-essential openssl libreadline6 libreadline6-dev curl git-core zlib1g zlib1g-dev libssl-dev libyaml-dev libsqlite3-0 libsqlite3-dev sqlite3 libxml2-dev libxslt-dev autoconf libc6-dev ncurses-dev automake libtool bison subversion
</code></pre>

<p>这里列出了安装 官方 Ruby 所需要安装的所有类库, 所以直接在终端里复制粘贴, 当然请记得每次安装前都使用 <code>rvm requirements</code> 查看下所需要的类库:</p>

<pre><code>apt-get install build-essential openssl libreadline6 libreadline6-dev curl git-core zlib1g zlib1g-dev libssl-dev libyaml-dev libsqlite3-0 libsqlite3-dev sqlite3 libxml2-dev libxslt-dev autoconf libc6-dev ncurses-dev automake libtool bison subversion
</code></pre>

<p>等待安装完成后就可以编译 Ruby 了.</p>

<p>安装 Ruby 由于使用了 RVM 所以只需要在终端里 输入:</p>

<pre><code>rvm install 1.9.3
</code></pre>

<p>就会自动的编译和安装 Ruby, 如果需要安装其他版本的 ruby 也可以通过命令：</p>

<pre><code>rvm list known
</code></pre>

<p>查看目前可以使用的 Ruby 版本, 其中 <code>[]</code> 内的部分可以省略。</p>

<p>等待 Ruby 1.9.2 安装好以后, 我们可以通过 <code>rvm list</code> 命令来查看所有通过 rvm 安装的 ruby 版本。</p>

<p>如果是root用户,由于目前 rvm 安装的 ruby-1.9.3 还是有目录权限问题, 所以我们还需要运行：</p>

<pre><code>chown -R :rvm $rvm_path
chmod -R g+w $rvm_path
</code></pre>

<p>修正目录权限问题。</p>

<h3>3. 设置 Ruby 环境</h3>

<p>首先, 我们通过 rvm 安装完以后, 并不能直接使用 ruby 和 gem 等命令, 还需要在终端输入：</p>

<pre><code>rvm use 1.9.3 --default
</code></pre>

<p>来将我们安装的 Ruby 设置为系统默认的 Ruby 环境。接着我们就可以通过 <code>ruby -v</code> 来验证刚刚的设置是否成功。</p>

<p>另外, 在服务器上由于不是开发环境, 所以 rdoc 和 ri 基本是毫无作用的, 所以我们最好默认就不让 rake 去安装 rdoc 和 ri, 所以我们还需要编辑 <code>/usr/local/rvm/rubies/ruby-1.9.2-p290/etc/gemrc</code> , (如果没有就自己建出来, 记得先建目录，本地的要在 <code>~/.rvm/rubies/ruby-1.9.3-p125/</code>  下新建etc/gemrc文件) 其 内容为:</p>

<pre><code>gem: -V --no-ri --no-rdoc
</code></pre>

<p>这样设置完以后, 每次使用 gem 命令就不会下载并安装 ri 和 rdoc 了, 另外该命令只对 1.9.2+ 的版本才有效, 如果是 1.8.7 的话 需要编辑的文件是 <code>/etc/gemrc</code>。</p>

<p>至此 Ruby 就算基本安装完成了。</p>

<h2>三. 安装数据库及其驱动</h2>

<p>由于我基本只用 Postgresql, 所以这里只安装 Postgresql, 如果要安装 Mysql或者其他数据库, 请自行 google 安装文档。</p>

<h3>1. 安装 Postgresql Server (可选)</h3>

<p>安装 postgresql server, 这里如果有多台机器作为服务器, 显然只需要一台机器安装数据库就可以了。</p>

<pre><code>apt-get install postgresql
</code></pre>

<p>安装完成以后, 编辑 <code>/etc/postgresql/9.1/main/postgresql.conf</code> 找到：</p>

<pre><code>#listen_addresses = 'localhost'
</code></pre>

<p>将其修改成：</p>

<pre><code>listen_addresses = '*'
</code></pre>

<p>这样就可以通过远程来访问该数据库了, 当然还需要开启对应的权限才可以. 接着我们编辑 <code>/etc/postgresql/9.1/main/pg_hba.conf</code> 在文件的最后可以看到:</p>

<pre><code># Database administrative login by UNIX sockets
local   all         postgres                          peer
# TYPE  DATABASE    USER        CIDR-ADDRESS          METHOD
# "local" is for Unix domain socket connections only
local   all         all                               peer
# IPv4 local connections:
host    all         all         127.0.0.1/32          md5
# IPv6 local connections:
host    all         all         ::1/128               md5
</code></pre>

<p>这样的内容, 如果是开发或者测试的服务器的话, 我会修改成:</p>

<pre><code># Database administrative login by UNIX sockets
#local   all         postgres                          peer

# TYPE  DATABASE    USER        CIDR-ADDRESS          METHOD

# "local" is for Unix domain socket connections only
local   all         all                               md5
# IPv4 local connections:
host    all         all         0.0.0.0/0             md5
# IPv6 local connections:
host    all         all         ::1/0                 md5
</code></pre>

<p>这样任何人在任何的地方都可以通过 ip 来访问数据库, 方便测试和调试, <strong>但如果是生产环境的话, 请务必明白每一行代码的效果后再修改。</strong></p>

<p>由于默认 postgres 用户密码是随机的, 如果需要使用 postgres 通过远程访问的话, 按照我们上述修改的话, 由于不知道密码还无法登入. 所以我们还需要在命令行输入:</p>

<pre><code>sudo su - postgres -c psql postgres
psql -U postgres
\password postgres
\q
</code></pre>

<p>修改 postgres 用户的密码, 我这里修改成的密码是 “postgres”, 实在是不安全, 所以请大家务必要修改成其他的密码.</p>

<p>最后输入 <code>/etc/init.d/postgresql restart</code> 重启 postgresql 服务器使配置文件生效.</p>

<h3>2. 安装 Postgresql 客户端和 Ruby 驱动</h3>

<pre><code>apt-get install -y postgresql-client libpq-dev
gem install pg
</code></pre>

<p>这个很简单直接 apt 和 gem 就可以了.</p>

<h2>四. 安装 Web 服务器（本地无需配置）</h2>

<p>对于 Rails 或者说 Rack 服务器来说, 有很多的选择比如 unicorn, thin, passenger 等等.我们这里使用最常用的 “Apache + Passenger” 的方式, 就是因为其部署和维护最为方便, 至于性能等有了大量用户再考虑这个问题也不迟, 再说 “Apache + Passenger” 本身性能也不差。</p>

<h3>1. 安装 apache 服务器</h3>

<p>在命令行输入：</p>

<pre><code>apt-get install -y apache2-mpm-prefork apache2-prefork-dev
</code></pre>

<p>安装完成以后, 用浏览器访问服务器的80端口确保可以看到 “It works!”. 再运行：</p>

<pre><code>a2dissite default
/etc/init.d/apache2 restart
rm /var/www/index.html
</code></pre>

<p>关闭刚刚那个无用的默认的网站。</p>

<h3>2. 设置 apache 用户</h3>

<p>apache 默认使用的是 <code>www-data</code> 用户, 而 Rails 程序也是使用该用户发布, 所以要修改 <code>www-data</code> 的相关配置信息, 允许这个 用户安装 Gem, 也就是加入 rvm 组：</p>

<pre><code>usermod --shell=/bin/bash -a -G rvm www-data
chown -R www-data:www-data /var/www
</code></pre>

<p>完成以后 Apache 基本也就安装好了。</p>

<h3>3. 安装 Passenger</h3>

<p>在终端中输入：</p>

<pre><code>gem install passenger
</code></pre>

<p>会自动下载并安装 passenger, 安装完 passenger 后, 输入:</p>

<pre><code>passenger-install-apache2-module
</code></pre>

<p>然后一路回车, passenger 会自动检测缺少的包, 我们这里提示缺少:</p>

<pre><code>* Curl development headers with SSL support... not found
</code></pre>

<p>所以我们按 ctrl + c 暂停目前的安装, 并输入:</p>

<pre><code>apt-get install libcurl4-openssl-dev
</code></pre>

<p>安装 curl 的 ssl dev包, 接着重新输入 <code>passenger-install-apache2-module</code> 开始编译 Passenger 的 Apache 模块 等编译完成以后, 会看到这样的提示:</p>

<pre><code>Please edit your Apache configuration file, and add these lines:

   LoadModule passenger_module /usr/local/rvm/gems/ruby-1.9.2-p290/gems/passenger-3.0.9/ext/apache2/mod_passenger.so
   PassengerRoot /usr/local/rvm/gems/ruby-1.9.2-p290/gems/passenger-3.0.9
   PassengerRuby /usr/local/rvm/wrappers/ruby-1.9.2-p290/ruby
</code></pre>

<p>于是我们就按照他的提示编辑 <code>/etc/apache2/mods-available/passenger.load</code> 输入:</p>

<pre><code>LoadModule passenger_module /usr/local/rvm/gems/ruby-1.9.2-p290/gems/passenger-3.0.9/ext/apache2/mod_passenger.so
</code></pre>

<p>再编辑 <code>/etc/apache2/mods-available/passenger.conf</code> 输入:</p>

<pre><code>PassengerRoot /usr/local/rvm/gems/ruby-1.9.2-p290/gems/passenger-3.0.9
PassengerRuby /usr/local/rvm/wrappers/ruby-1.9.2-p290/ruby
</code></pre>

<p>接下来让 apache 启用该模块, 输入:</p>

<pre><code>a2enmod passenger
/etc/init.d/apache2 restart
</code></pre>

<p>至于 Passenger 的性能调优, 清参考 <a href="http://www.modrails.com/documentation.html">passenger 的官方文档</a>.</p>
]]></content>
  </entry>
  
</feed>
